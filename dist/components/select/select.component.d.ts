import '../chip.js';
import '../flyout.js';
import '../icon-button.js';
import '../icon.js';
import BaseElement from '../../internal/base-element.js';
import type { BaseFormControl } from '../../internal/base-form-control.js';
import type { CSSResultGroup } from 'lit';
import type CpsFlyout from '../flyout.js';
import type CpsOption from '../option.js';
export default class CpsSelect extends BaseElement implements BaseFormControl {
    static styles: CSSResultGroup;
    private readonly formControlController;
    private readonly hasSlotController;
    private readonly localize;
    private typeToSelectString;
    private typeToSelectTimeout;
    flyout: CpsFlyout;
    field: HTMLSlotElement;
    displayInput: HTMLInputElement;
    valueInput: HTMLInputElement;
    menu: HTMLSlotElement;
    private hasFocus;
    private generatedId;
    displayLabel: string;
    currentOption: CpsOption;
    selectedOptions: CpsOption[];
    id: string;
    name: string;
    value: string | string[];
    defaultValue: string | string[];
    size: 'small' | 'medium' | 'large';
    placeholder: string;
    multiple: boolean;
    maxOptionsVisible: number;
    disabled: boolean;
    clearable: boolean;
    open: boolean;
    strategy: 'absolute' | 'fixed';
    label: string;
    placement: 'top' | 'bottom';
    helpText: string;
    form: string;
    required: boolean;
    get validity(): ValidityState;
    get validationMessage(): string;
    handleIdChange(): void;
    connectedCallback(): void;
    private addOpenListeners;
    private removeOpenListeners;
    private handleFocus;
    private handleBlur;
    private handleDocumentFocusIn;
    private handleDocumentKeyDown;
    private handleDocumentMouseDown;
    private handleComboboxMouseDown;
    private handleComboboxKeyDown;
    private handleClearClick;
    private handleClearMouseDown;
    private handleOptionClick;
    private handleDefaultSlotChange;
    private handleTagRemove;
    private getAllLabels;
    private getAllOptions;
    private getFirstOption;
    private setCurrentOption;
    private setSelectedOptions;
    private toggleOptionSelection;
    private selectionChanged;
    private handleInvalid;
    handleDisabledChange(): void;
    handleValueChange(): void;
    handleOpenChange(): Promise<void>;
    show(): Promise<void>;
    hide(): Promise<void>;
    checkValidity(): boolean;
    getForm(): HTMLFormElement | null;
    reportValidity(): boolean;
    setCustomValidity(message: string): void;
    focus(options?: FocusOptions): void;
    blur(): void;
    render(): import("lit-html").TemplateResult<1>;
}
export { CpsSelect };
declare global {
    interface HTMLElementTagNameMap {
        'cps-select': CpsSelect;
    }
}
